# This file was generated by Chef for <%= node['fqdn'] %>
# Do NOT modify this file by hand!

backend default {
  .host = "<%= @vcl_config_data['backend_host'] %>";
  .port = "<%= node[:nmdvarnish][:backend_port] %>";
}

<% @vcl_config_data['sites'].each do |site_name, site| %>

acl <%= site_name %> {
        <%= site['acladdresses'].join(';' + "\n        ") %>;
       }

<% end %>

sub vcl_recv {

#forward users actual IP address
remove req.http.X-Forwarded-For;
set req.http.X-Forwarded-For = client.ip;

# Do not cache these paths.
if (req.url ~ "^/status\.php$" ||
req.url ~ "^/update\.php$" ||
req.url ~ "^/admin$" ||
req.url ~ "^/admin/.*$" ||
req.url ~ "^/flag/.*$" ||
req.url ~ "^.*/ajax/.*$" ||
req.url ~ "^.*/ahah/.*$") {
return (pass);
}

# Always cache the following file types for all users. This list of extensions
# appears twice, once here and again in vcl_fetch, so make sure you edit both
# and keep them equal.
if (req.url ~
"(?i)\.(pdf|txt|doc|xls|ppt|csv|png|gif|jpeg|jpg|ico|swf|css|js)(\?.*)?$") {
unset req.http.Cookie;
}

if (req.http.Cookie) {
# Append a semicolon to the front of the cookie string.
set req.http.Cookie = ";" + req.http.Cookie;
# Remove all spaces that appear after semicolons.
set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
#Remove has_js and Google Analytics __* cookies.
##set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(_[_a-z]+|has_js)=[^;]*", "");
# Match the cookies we want to keep, adding back the space we removed
# previously. "\1" is first matching group in the regular expression match.
set req.http.Cookie = regsuball(req.http.Cookie,
";(SESS[a-z0-9]+|SSESS[a-z0-9]+|NO_CACHE)=", "; \1=");
# Remove all other cookies, identifying them by the fact that they have
# no space after the preceding semicolon.
set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
# Remove all spaces and semicolons from the beginning and end of the
# cookie string.
set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

if (req.http.Cookie == "") {
# If there are no remaining cookies, remove the cookie header
# so that Varnish will cache the request.
unset req.http.Cookie;
}
else {
 # If there are any cookies left (a session or NO_CACHE cookie), do not
 # cache the page. Pass it on to the backend directly.
 return (pass);
  }
 }
}

sub vcl_deliver {
# Set a header to track if this was a cache hit or miss.
# Include hit count for cache hits.
 if (obj.hits > 0) {
 set resp.http.X-Varnish-Cache = "HIT";
 set resp.http.X-Varnish-Hits = obj.hits;
 }
 else {
 set resp.http.X-Varnish-Cache = "MISS";
 }
}

sub vcl_fetch {
# Items returned with these status values wouldn't be cached by default,
# but by doing so we can save some Drupal overhead.
if (beresp.status == 404 || beresp.status == 301 || beresp.status == 500) {
set beresp.ttl = 10m;
}
# Don't allow static files to set cookies.
# This list of extensions appears twice, once here and again in vcl_recv, so
# make sure you edit both and keep them equal.
if (req.url ~
"(?i)\.(pdf|txt|doc|xls|ppt|csv|png|gif|jpeg|jpg|ico|swf|css|js)(\?.*)?$") {
unset beresp.http.set-cookie;
}
# Allow items to be stale if needed, in case of problems with the backend.
set beresp.grace = 6h;
}
